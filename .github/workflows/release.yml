name: Release

#on:
#  push:
#    branches:
#      - master
#      - main

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        type: environment
        required: true

permissions:
  contents: read # for checkout

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      output1: ${{ steps.release-step.outputs.cdn_version }}
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: Show environment
        run: echo "Running on this environment ${{ inputs.environment }}"
      - name: Show normal vars and secrets
        run: echo "Normal ${{ vars.NORMAL_VAR_1 }} ${{ secrets.SLACK_WEBHOOK }}"
      - name: Show environment vars and secrets
        run: echo "variable from shell environment111 ${{ vars.VAR1 }} ${{ secrets.SECRET1 }} $VAR1 $SECRET1"


      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: npm clean-install
      - name: Build
        run: npm run build
      - name: Release
        id: release-step
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: npm run release
      - name: Got version
        run: echo "Got version ${{ steps.release-step.outputs.cdn_version }}"
      - name: Check version
        if: ${{ steps.release-step.outputs.cdn_version == '' }}
        uses: actions/github-script@v7
        with:
          script: |
            core.setFailed('No version found!')

      #      - name: Check version
      #        if: ${{ steps.release-step.outputs.cdn_version == '' }}
      #        run: exit 1
      - name: Do something with version
        run: echo "Doing something with version ${{ steps.release-step.outputs.cdn_version }}"

#  update-release:
#    needs: release
#    if: ${{ needs.release.outputs.output1 != '' }}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Update release
#        run: echo "Updating... ${{ needs.release.outputs.output1 }}"
#  some-job:
#    runs-on: ubuntu-latest
#    steps:
#      - name: some-job-step1
#        run: echo "step1 running"
